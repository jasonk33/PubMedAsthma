using BioMedQuery.Processes
using BioMedQuery.Entrez
using MySQL
using DataFrames
using StatsBase
using BioMedQuery.UMLS
using BioMedQuery
using PlotlyJS
using RCall
using AssociationRules
using Rsvg

function split_rule!(dat)
    n = size(dat, 1)
    dat[:lhs] = Array{String,1}(n)
    dat[:rhs] = Array{String,1}(n)
    for i = 1:n
        dat[i, :lhs], dat[i, :rhs] = split(dat[i, :rules], " => ")
    end
end

function apriori2(dat::DataFrame, supp = 0.2, conf = 0.01, minlen = 1, maxlen = 10, minlift = 1.2)
    @rput supp
    @rput conf
    @rput minlen
    @rput maxlen
    @rput minlift
    R"library('arules')"
    path = homedir()
    writetable("$path/output.csv",dat)
    @rput path
    R"dat2 = read.csv(paste(path, '/output.csv', sep = ''))"
    R"dat2 <- as(as(dat2, 'matrix'),'itemMatrix')"
    R"rules1 <- apriori(dat2, parameter = list(supp = supp, conf = conf, minlen = minlen, maxlen = maxlen), control = list(verbose = FALSE))"
    R"rules1 <- if (length(rules1) == 0) data.frame() else rules1"
    R"rules1 <- character_columns(as(rules1, \"data.frame\"))"
    R"rules_sub <- subset(rules1, subset = lift > minlift)"
    rules_df = @rget rules_sub;             # get dataframe from R
    R"rm(dat2, rules1, rules_sub, supp, conf, minlen, maxlen, minlift)"           # clean up R environment
    split_rule!(rules_df);
    rules_df = rules_df[:, [:lhs, :rhs, :support, :confidence, :lift]]
    rules_df
end

search_term = "asthma[mh] AND adult[mh] NOT (infant[mh] OR child[mh] OR adolescent[mh]) AND (1800[Date - Publication] : 2/13/2014[Date - Publication])" #search term for adult asthma
email= "jason_katz@brown.edu"
host="Jasons-MacBook-Air-2.local"
mysql_usr="jasonk33"
credentials = Credentials("jasonk33", ENV["UMLS_PSWD"])
overwrite=true
verbose = false
append = false
max_articles = 25000
dbname="pubmed_asthma_adult"
config = Dict(:host=>host,
                 :dbname=>dbname,
                 :username=>mysql_usr,
                 :pswd=>ENV["MYSQL_PSWD"],
                 :overwrite=>overwrite)

@time begin
    db = pubmed_search_and_save(email, search_term, max_articles, save_efetch_mysql, config, verbose) #get info from articles
end

con = mysql_connect(host, mysql_usr, ENV["MYSQL_PSWD"], dbname)
mesh_descriptor = mysql_execute(con, "SELECT * FROM mesh_descriptor;") #get mesh descriptor data from MySQL
mesh_heading = mysql_execute(con, "SELECT * FROM mesh_heading;") #get header data from MySQL
@time begin
    map_mesh_to_umls_async!(con, credentials; append_results=append) #get semantic types for articles
end
mesh2umls = mysql_execute(con, "SELECT * FROM mesh2umls;") #get data umls data from MySQL
mysql_disconnect(con)
rename!(mesh_descriptor, [:id, :name], [:did, :mesh_descriptor]) #change columns name for join
data = sort(join(mesh_descriptor, mesh_heading, on = :did)[:,[:mesh_descriptor, :pmid]], cols=:pmid) #data of mesh terms for each article
arts = unique(data[:pmid]) #article ID's
rename!(mesh2umls, :mesh, :mesh_descriptor) #change column name for join
data_semantic = join(data, mesh2umls, on = :mesh_descriptor) #data of semantic types for each article
semantic_counts = sort(collect(zip(values(countmap(data_semantic[:umls])),keys(countmap(data_semantic[:umls])))),rev=true) #counts for semantic types
semantics=DataFrame(Any,0,2)
for i in 1:length(semantic_counts)
    semantic = [semantic_counts[i][1],semantic_counts[i][2]]
    push!(semantics, semantic)
end #get semantic counts into usable form
frequency = DataArray(Float64, length(semantics[2]))
for i in 1:length(semantics[2])
    freq = length(unique(data_semantic[data_semantic[:umls] .== semantics[i,2],2]))/length(arts)
    frequency[i] = freq
end #calculate frequency for each semantic type
semantics[:freq]=frequency #add frequencies to data
sort!(semantics, cols = :freq, rev = true) #sort by frequency
rename!(semantics, [:x1, :x2], [:count, :semantic_type]) #rename columns
mesh_counts = sort(collect(zip(values(countmap(data[:mesh_descriptor])),keys(countmap(data[:mesh_descriptor])))),rev=true) #counts for mesh descriptors
mesh_descrips=DataFrame(Any,0,2)
for i in 1:length(mesh_counts)
    mesh_descrip = [mesh_counts[i][1],mesh_counts[i][2]]
    push!(mesh_descrips, mesh_descrip)
end #get mesh counts into usable form
frequency = DataArray(Float64, length(mesh_descrips[2]))
for i in 1:length(mesh_descrips[2])
    freq = length(unique(data[data[:mesh_descriptor] .== mesh_descrips[i,2],2]))/length(arts)
    frequency[i] = freq
end #calculate frequency for each mesh term
mesh_descrips[:freq]=frequency #add frequencies to data
sort!(mesh_descrips, cols = :freq, rev = true) #sort by frequency
rename!(mesh_descrips, [:x1, :x2], [:count, :mesh_descriptor]) #rename columns
umls_filtered = mesh2umls[(mesh2umls[:umls] .== "Disease or Syndrome") | (mesh2umls[:umls] .== "Mental or Behavioral Dysfunction") | (mesh2umls[:umls] .== "Neoplastic Process"),:] #filter by semantic type
data_filtered = join(data, umls_filtered, on = :mesh_descriptor) #new data after filtering
arts_filtered = unique(data_filtered[:pmid]) #article ID's after filtering
mesh_counts_filtered = sort(collect(zip(values(countmap(data_filtered[:mesh_descriptor])),keys(countmap(data_filtered[:mesh_descriptor])))),rev=true) #counts for mesh descriptors after filtering
mesh_descrips_filtered=DataFrame(Any,0,2)
for i in 1:length(mesh_counts_filtered)
    mesh_descrip_filtered = [mesh_counts_filtered[i][1],mesh_counts_filtered[i][2]]
    push!(mesh_descrips_filtered, mesh_descrip_filtered)
end #get mesh counts into usable form
frequency = DataArray(Float64, length(mesh_descrips_filtered[2]))
for i in 1:length(mesh_descrips_filtered[2])
    freq = length(unique(data_filtered[data_filtered[:mesh_descriptor] .== mesh_descrips_filtered[i,2],2]))/length(arts_filtered)
    frequency[i] = freq
end #calculate frequency for each mesh term
mesh_descrips_filtered[:freq]=frequency #add frequencies to data
sort!(mesh_descrips_filtered, cols = :freq, rev = true) #sort by frequency
rename!(mesh_descrips_filtered, [:x1, :x2], [:count, :mesh_descriptor]) #rename columns
itemsets_filtered = DataFrame(Any, 0,length(mesh_descrips_filtered[2])) #initialize empty dataframe
names!(itemsets_filtered, [symbol(mesh_descrips_filtered[i,2]) for i in 1:length(mesh_descrips_filtered[2])]) #add column names
@time begin
    for j = 1:length(arts_filtered)
        contains_filtered=Vector(length(mesh_descrips_filtered[2]))
        for i = 1:length(mesh_descrips_filtered[2])
            contain_filtered = Int(in(mesh_descrips_filtered[i,2],convert(Array{AbstractString}, unique(data_filtered[data_filtered[:pmid].==arts_filtered[j],1])))) #get 1 or 0 for each item in a transaction
            contains_filtered[i] = contain_filtered #add each item's value (1 or 0) to the transaction vector
        end
        push!(itemsets_filtered, contains_filtered) #add all transaction vectors to dataframe
    end
end
############################################################Results############################################################
length(arts) #Number of articles matching search criteria
length(mesh_descrips[:,2]) #Number of unique mesh descriptors
length(semantics[:,3]) #Number of unique semantic types
mesh_descrips #Counts and frequencies of mesh descriptors
semantics #Counts and frequencies of semantic types
plot(bar(x=mesh_descrips[1:25,:mesh_descriptor], y=mesh_descrips[1:25,:freq])) #Top 25 mesh descriptors
plot(bar(x=semantics[1:10,:semantic_type], y=semantics[1:10,:freq])) #Top 10 semantic types
#apriori2(itemsets, .01, .01, 1, 3, 0) #association rules for data
length(mesh_descrips_filtered[:,:mesh_descriptor]) #Number of unique mesh descriptors after filtering
mesh_descrips_filtered #Counts and frequencies of mesh descriptors after filtering
p = plot(bar(x=mesh_descrips_filtered[1:25,:mesh_descriptor], y=mesh_descrips_filtered[1:25,:freq])) #Top 25 mesh descriptors after filtering
apriori2(itemsets_filtered, .01, .01, 2, 3, 0) #association rules for filtered data
############################################################Results############################################################



#umls filtering function
#itemsets
#jupyter notebook
#histograms
#other plots
#comparison table
#readme - paper - results - comparison - link to notebook


savefig(p, "./plot_test.pdf")


itemsets_filtered


mesh_descrips_filtered


filt = Set(mesh_descrips_filtered[:mesh_descriptor])

arts

article_mesh = Set(Entrez.DB.get_article_mesh(con, arts))
